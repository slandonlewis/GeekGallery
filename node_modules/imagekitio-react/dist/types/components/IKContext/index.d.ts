import ImageKitComponent from "../ImageKitComponent";
import { InferProps } from 'prop-types';
import ImageKit from 'imagekit-javascript';
import { IKContextCombinedProps } from "./props";
/**
 * Provides a container for ImageKit components. Any option set in IKContext will be passed to the children.
 *
 * @example
 *<IKContext  publicKey="<public key>" urlEndpoint="url link">
 *    <!-- other tags -->
 *    <Image src={link}/>
 *</IKContext>
 */
declare class IKContext extends ImageKitComponent<IKContextCombinedProps> {
    static propTypes: {
        ikClient: import("prop-types").Requireable<ImageKit>;
        fileName: import("prop-types").Requireable<string>;
        tags: import("prop-types").Requireable<string[]>;
        useUniqueFileName: import("prop-types").Requireable<boolean>;
        responseFields: import("prop-types").Requireable<any[]>;
        isPrivateFile: import("prop-types").Requireable<boolean>;
        folder: import("prop-types").Requireable<string>;
        customCoordinates: import("prop-types").Requireable<string>;
        extensions: import("prop-types").Requireable<object[]>;
        webhookUrl: import("prop-types").Requireable<string>;
        overwriteFile: import("prop-types").Requireable<boolean>;
        overwriteAITags: import("prop-types").Requireable<boolean>;
        overwriteTags: import("prop-types").Requireable<boolean>;
        overwriteCustomMetadata: import("prop-types").Requireable<boolean>;
        customMetadata: import("prop-types").Requireable<any>;
        onError: import("prop-types").Requireable<(...args: any[]) => any>;
        onSuccess: import("prop-types").Requireable<(...args: any[]) => any>;
        onUploadStart: import("prop-types").Requireable<(...args: any[]) => any>;
        onUploadProgress: import("prop-types").Requireable<(...args: any[]) => any>;
        inputRef: import("prop-types").Requireable<object>;
        validateFile: import("prop-types").Requireable<(...args: any[]) => any>;
        loading: import("prop-types").Requireable<string>;
        lqip: import("prop-types").Requireable<InferProps<{
            active: import("prop-types").Requireable<boolean>;
            quality: import("prop-types").Requireable<number>;
            threshold: import("prop-types").Requireable<number>;
            blur: import("prop-types").Requireable<number>;
            raw: import("prop-types").Requireable<string>;
        }>>;
        path: import("prop-types").Requireable<string>;
        src: import("prop-types").Requireable<string>;
        queryParameters: import("prop-types").Requireable<{
            [x: string]: NonNullable<NonNullable<string | number | null | undefined>>;
        }>;
        transformation: import("prop-types").Requireable<object[]>;
        transformationPosition: import("prop-types").Requireable<string>;
        publicKey: import("prop-types").Requireable<string>;
        urlEndpoint: import("prop-types").Requireable<string>;
        authenticationEndpoint: import("prop-types").Requireable<string>;
    };
    extractContextOptions(mergedOptions: InferProps<IKContextCombinedProps>): IKContextCombinedProps;
    render(): JSX.Element;
}
export default IKContext;
