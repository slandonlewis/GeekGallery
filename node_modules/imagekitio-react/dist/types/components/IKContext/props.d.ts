import ImageKit from 'imagekit-javascript';
import PropTypes, { InferProps } from 'prop-types';
declare const Props: {
    publicKey: PropTypes.Requireable<string>;
    urlEndpoint: PropTypes.Requireable<string>;
    authenticationEndpoint: PropTypes.Requireable<string>;
};
export declare const IKContextCombinedProps: {
    ikClient: PropTypes.Requireable<ImageKit>;
    fileName: PropTypes.Requireable<string>;
    tags: PropTypes.Requireable<string[]>;
    useUniqueFileName: PropTypes.Requireable<boolean>;
    responseFields: PropTypes.Requireable<any[]>;
    isPrivateFile: PropTypes.Requireable<boolean>;
    folder: PropTypes.Requireable<string>;
    customCoordinates: PropTypes.Requireable<string>;
    extensions: PropTypes.Requireable<object[]>;
    webhookUrl: PropTypes.Requireable<string>;
    overwriteFile: PropTypes.Requireable<boolean>;
    overwriteAITags: PropTypes.Requireable<boolean>;
    overwriteTags: PropTypes.Requireable<boolean>;
    overwriteCustomMetadata: PropTypes.Requireable<boolean>;
    customMetadata: PropTypes.Requireable<any>;
    onError: PropTypes.Requireable<(...args: any[]) => any>;
    onSuccess: PropTypes.Requireable<(...args: any[]) => any>;
    onUploadStart: PropTypes.Requireable<(...args: any[]) => any>;
    onUploadProgress: PropTypes.Requireable<(...args: any[]) => any>;
    inputRef: PropTypes.Requireable<object>;
    validateFile: PropTypes.Requireable<(...args: any[]) => any>;
    loading: PropTypes.Requireable<string>;
    lqip: PropTypes.Requireable<PropTypes.InferProps<{
        active: PropTypes.Requireable<boolean>;
        quality: PropTypes.Requireable<number>;
        threshold: PropTypes.Requireable<number>;
        blur: PropTypes.Requireable<number>;
        raw: PropTypes.Requireable<string>;
    }>>;
    path: PropTypes.Requireable<string>;
    src: PropTypes.Requireable<string>;
    queryParameters: PropTypes.Requireable<{
        [x: string]: NonNullable<NonNullable<string | number | null | undefined>>;
    }>;
    transformation: PropTypes.Requireable<object[]>;
    transformationPosition: PropTypes.Requireable<string>;
    publicKey: PropTypes.Requireable<string>;
    urlEndpoint: PropTypes.Requireable<string>;
    authenticationEndpoint: PropTypes.Requireable<string>;
};
export declare type IKContextCombinedProps = InferProps<typeof IKContextCombinedProps> & {
    src?: string;
    path?: string;
    urlEndpoint?: string;
    transformation?: Array<string>;
};
export declare type IKContextBaseProps = InferProps<typeof Props>;
export default Props;
