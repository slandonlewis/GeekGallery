import React from 'react';
import ImageKitComponent from "../ImageKitComponent";
import { IKImageProps } from './combinedProps';
import { IKImageState } from '../../utils/Utility';
declare class IKImage extends ImageKitComponent<IKImageProps> {
    imageRef: React.RefObject<HTMLImageElement>;
    state: IKImageState;
    static propTypes: {
        loading: import("prop-types").Requireable<string>;
        lqip: import("prop-types").Requireable<import("prop-types").InferProps<{
            active: import("prop-types").Requireable<boolean>;
            quality: import("prop-types").Requireable<number>;
            threshold: import("prop-types").Requireable<number>;
            blur: import("prop-types").Requireable<number>;
            raw: import("prop-types").Requireable<string>;
        }>>;
        path: import("prop-types").Requireable<string>;
        src: import("prop-types").Requireable<string>;
        queryParameters: import("prop-types").Requireable<{
            [x: string]: NonNullable<NonNullable<string | number | null | undefined>>;
        }>;
        transformation: import("prop-types").Requireable<object[]>;
        transformationPosition: import("prop-types").Requireable<string>;
        publicKey: import("prop-types").Requireable<string>;
        urlEndpoint: import("prop-types").Requireable<string>;
        authenticationEndpoint: import("prop-types").Requireable<string>;
    };
    constructor(props: IKImageProps, context: any);
    updateImageUrl(): void;
    triggerOriginalImageLoad(): void;
    componentDidMount(): void;
    componentWillUnmount(): void;
    componentDidUpdate(prevProps: IKImageProps, prevState: IKImageState): void;
    render(): JSX.Element;
}
export default IKImage;
