import React from 'react';
import ImageKitComponent from "../ImageKitComponent";
import { IKUploadProps } from "./props";
declare type IKUploadState = {
    xhr?: XMLHttpRequest;
};
declare class IKUpload extends ImageKitComponent<IKUploadProps> {
    state: IKUploadState;
    static propTypes: {
        fileName: import("prop-types").Requireable<string>;
        tags: import("prop-types").Requireable<string[]>;
        useUniqueFileName: import("prop-types").Requireable<boolean>;
        responseFields: import("prop-types").Requireable<any[]>;
        isPrivateFile: import("prop-types").Requireable<boolean>;
        folder: import("prop-types").Requireable<string>;
        customCoordinates: import("prop-types").Requireable<string>;
        extensions: import("prop-types").Requireable<object[]>;
        webhookUrl: import("prop-types").Requireable<string>;
        overwriteFile: import("prop-types").Requireable<boolean>;
        overwriteAITags: import("prop-types").Requireable<boolean>;
        overwriteTags: import("prop-types").Requireable<boolean>;
        overwriteCustomMetadata: import("prop-types").Requireable<boolean>;
        customMetadata: import("prop-types").Requireable<any>;
        onError: import("prop-types").Requireable<(...args: any[]) => any>;
        onSuccess: import("prop-types").Requireable<(...args: any[]) => any>;
        onUploadStart: import("prop-types").Requireable<(...args: any[]) => any>;
        onUploadProgress: import("prop-types").Requireable<(...args: any[]) => any>;
        inputRef: import("prop-types").Requireable<object>;
        validateFile: import("prop-types").Requireable<(...args: any[]) => any>;
        publicKey: import("prop-types").Requireable<string>;
        urlEndpoint: import("prop-types").Requireable<string>;
        authenticationEndpoint: import("prop-types").Requireable<string>;
    };
    static defaultProps: {
        useUniqueFileName: boolean;
        isPrivateFile: boolean;
        customCoordinates: string;
        tags: never[];
        folder: string;
        responseFields: never[];
    };
    abort(): void;
    uploadFile(e: React.ChangeEvent<HTMLInputElement>): void;
    render(): JSX.Element;
}
export default IKUpload;
