import { UploadResponse } from 'imagekit-javascript/dist/src/interfaces';
import PropTypes, { InferProps } from 'prop-types';
import React, { LegacyRef } from 'react';
declare const Props: {
    fileName: PropTypes.Requireable<string>;
    tags: PropTypes.Requireable<string[]>;
    useUniqueFileName: PropTypes.Requireable<boolean>;
    responseFields: PropTypes.Requireable<any[]>;
    isPrivateFile: PropTypes.Requireable<boolean>;
    folder: PropTypes.Requireable<string>;
    customCoordinates: PropTypes.Requireable<string>;
    extensions: PropTypes.Requireable<object[]>;
    webhookUrl: PropTypes.Requireable<string>;
    overwriteFile: PropTypes.Requireable<boolean>;
    overwriteAITags: PropTypes.Requireable<boolean>;
    overwriteTags: PropTypes.Requireable<boolean>;
    overwriteCustomMetadata: PropTypes.Requireable<boolean>;
    customMetadata: PropTypes.Requireable<any>;
    onError: PropTypes.Requireable<(...args: any[]) => any>;
    onSuccess: PropTypes.Requireable<(...args: any[]) => any>;
    onUploadStart: PropTypes.Requireable<(...args: any[]) => any>;
    onUploadProgress: PropTypes.Requireable<(...args: any[]) => any>;
    inputRef: PropTypes.Requireable<object>;
    validateFile: PropTypes.Requireable<(...args: any[]) => any>;
};
export declare type IKUploadProps = InferProps<typeof Props> & {
    useUniqueFileName?: boolean;
    tags?: Array<string>;
    folder?: string;
    isPrivateFile?: boolean;
    customCoordinates?: string;
    responseFields?: Array<string>;
    extensions?: object[];
    webhookUrl?: string;
    overwriteFile?: boolean;
    overwriteAITags?: boolean;
    overwriteTags?: boolean;
    overwriteCustomMetadata?: boolean;
    customMetadata?: string | Record<string, string | number | boolean | Array<string | number | boolean>>;
    inputRef?: LegacyRef<HTMLInputElement>;
    onError?: (err: Error) => void;
    onSuccess?: (res: UploadResponse) => void;
    onUploadStart?: (evt: React.ChangeEvent<HTMLInputElement>) => void;
    onUploadProgress?: (evt: ProgressEvent<XMLHttpRequestEventTarget>) => void;
    validateFile?: (file: File) => boolean;
} & React.InputHTMLAttributes<HTMLInputElement>;
export default Props;
