import ImageKit from "imagekit-javascript";
import { IKContextCombinedProps, IKContextBaseProps } from "../components/IKContext/props";
import { IKImageProps, IKImageBaseProps } from "../components/IKImage/combinedProps";
import { IKVideoBaseProps } from "../components/IKVideo/combinedProps";
export declare type IKImageState = {
    currentUrl?: string;
    originalSrc: string;
    lqipSrc?: string;
    originalSrcLoaded: boolean;
    intersected: boolean;
    contextOptions: IKContextCombinedProps;
    observe?: IntersectionObserver;
};
export declare const fetchEffectiveConnection: () => any;
export declare const areObjectsDifferent: <T>(prevProps: T, newProps: T, propsAffectingURL: Array<string>) => boolean;
declare type GetSrcReturnType = {
    originalSrc: string;
    lqipSrc?: string;
};
export declare const getSrc: ({ urlEndpoint, lqip, src, path, transformation, transformationPosition, queryParameters }: IKImageBaseProps & IKVideoBaseProps & IKContextBaseProps, ikClient: ImageKit, contextOptions: IKContextCombinedProps) => GetSrcReturnType;
export declare const getIKElementsUrl: ({ lqip, loading }: IKImageProps, { intersected, originalSrcLoaded, originalSrc, lqipSrc }: IKImageState) => string | undefined;
export {};
